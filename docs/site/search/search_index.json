{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Magic-Assistant is an open source AI agent framework. You can use it to develop multiple types of agent. Now support 4 types of agent:</p>"},{"location":"#chat","title":"chat","text":"<p>Chat agent chats with you like a human. It is the most normal and simple type.</p>"},{"location":"#execute_cmd","title":"execute_cmd","text":"<p>Execute cmd agent uses built-in plugins to try to accomplish your task. This agent type applies to simple tasks which  can be accomplished by one plugin.</p>"},{"location":"#plan","title":"plan","text":"<p>Plan agent makes a plan and use built-in plugins to execute plan items according to try to accomplish your task. Agent evaluate  the result of execution and adjust plan if necessary. This agent type applies to complicated tasks which can not be  accomplished by one plugin.</p>"},{"location":"#role_play","title":"role_play","text":"<p>Role play agent usually does not work alone. Each agent has its own name, role and memory. They coordinate with each other in  your defined sandbox. This agent type is inspired by \"Generative Agents: Interactive Simulacra of Human Behavior\" (https://arxiv.org/abs/2304.03442).</p>"},{"location":"client/","title":"Client","text":"<p>Magic-Assistant supports two types of client: cli and restful_api. If you want to use or test Magic-Assistant in shell, choose the cli type. If you want to integrate Magic-Assistant into own products, choose the restful_api type.</p>"},{"location":"client/#cli","title":"Cli","text":"<p>Execute \"python3 -m magic_assistant.main --help\" to show the supported args. Refer to the examples in the \"Magic-Assistant/examples\" directory. For example, you can execute \"python3 -m magic_assistant.main --agent run --io_type cli --agent_meta '{\"type\": $AGENT_TYPE}'\"  to start an agent.</p>"},{"location":"client/#restful-api","title":"Restful Api","text":"<p>Execute \"python3 -m magic_assistant.main --io_type restful_api --agent run\" to start magic_assistant in restful_api mode. You can use http or websocket to communicate with magic_assistant.  For the restful_api detail, you can refer to restful api.</p>"},{"location":"install/","title":"Install","text":"<p>Magic-Assistant supports two installation types: metal and docker.</p>"},{"location":"install/#pip","title":"pip","text":"<p>Execute \"pip3 install magic_assistant\" to install directly. Python is newer than 3.10. </p>"},{"location":"install/#docker","title":"docker","text":"<p>The mojingsmart/magic-assistant:latest docker image has already installed the python dependencies and Magic-Assistant and starts up in restful_api mode. You can connect with it by http and websocket clients.</p> <p>If you decide to use Magic-Assistant in docker, you should execute the following shell cmds to install nvidia dependencies and configure the system: 1, sudo apt-get update 2, sudo apt-get install -y nvidia-container-toolkit 3, sudo nvidia-ctk runtime configure --runtime=docker 4, sudo systemctl restart docker 5, sudo reboot</p> <p>You can start the magic-assistant docker in the following methods: 1, cd $Magic-Assistant 2, docker compose -f deployment/docker-compose.yml up -d magic-assistant</p>"},{"location":"install/#compile-source","title":"compile source","text":"<p>1, Setup your own python environment, require python3.10+. For example, execute \"conda create -n mojing python=3.10\" in shell;</p> <p>2, Install python packages. In shell, cd to the directory of Magic-Assistant and execute \" pip3 install -e .\".</p>"},{"location":"client/restful_api/","title":"restful api","text":"<p>Base URLs: http://127.0.0.1:8080</p>"},{"location":"client/restful_api/#default","title":"Default","text":""},{"location":"client/restful_api/#post-list","title":"POST list","text":"<p>POST /agent/list</p> <p>Body Parameters</p> <pre><code>{}\n</code></pre>"},{"location":"client/restful_api/#params","title":"Params","text":"Name Location Type Required Description body body object no none <p>Response Examples</p> <p>200 Response</p> <pre><code>{}\n</code></pre>"},{"location":"client/restful_api/#responses","title":"Responses","text":"HTTP Status Code Meaning Description Data schema 200 OK \u6210\u529f Inline"},{"location":"client/restful_api/#post-delete","title":"POST delete","text":"<p>POST /agent/delete</p> <p>Body Parameters</p> <pre><code>{\n  \"id\": \"string\"\n}\n</code></pre>"},{"location":"client/restful_api/#params_1","title":"Params","text":"Name Location Type Required Description body body object no none \u00bb id body string yes none <p>Response Examples</p> <p>200 Response</p> <pre><code>{}\n</code></pre>"},{"location":"client/restful_api/#responses_1","title":"Responses","text":"HTTP Status Code Meaning Description Data schema 200 OK \u6210\u529f Inline"},{"location":"client/restful_api/#post-create","title":"POST create","text":"<p>POST /agent/create</p> <p>Body Parameters</p> <pre><code>{\n  \"name\": \"string\",\n  \"type\": \"string\"\n}\n</code></pre>"},{"location":"client/restful_api/#params_2","title":"Params","text":"Name Location Type Required Description body body object no none \u00bb name body string yes none \u00bb type body string yes none <p>Response Examples</p> <p>200 Response</p> <pre><code>{}\n</code></pre>"},{"location":"client/restful_api/#responses_2","title":"Responses","text":"HTTP Status Code Meaning Description Data schema 200 OK \u6210\u529f Inline"},{"location":"client/restful_api/#websocket-run","title":"Websocket run","text":"<p>Websocket /agent/run</p>"},{"location":"client/restful_api/#connect","title":"connect","text":"<p>Client send agent_id, to connect with the server.</p> <p>{\"id\": \"$AGENT_ID\"}</p>"},{"location":"client/restful_api/#run","title":"run","text":"<p>Client send user content to agent in the following format:</p> <p>{\"id\": \"$AGENT_ID\", \"content\"\uff1a \"$CONTENT\"}</p>"}]}